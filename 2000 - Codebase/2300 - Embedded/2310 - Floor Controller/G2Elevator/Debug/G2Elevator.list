
G2Elevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800388c  0800388c  0001388c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038c4  080038c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080038c4  080038c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038c4  080038c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038c4  080038c4  000138c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038c8  080038c8  000138c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080038cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000118  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000124  20000124  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e29f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c64  00000000  00000000  0002e2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa8  00000000  00000000  0002ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  000309e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f77c  00000000  00000000  000313e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dfbc  00000000  00000000  00050b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfacb  00000000  00000000  0005eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011e5eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c20  00000000  00000000  0011e63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003874 	.word	0x08003874

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003874 	.word	0x08003874

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fb0c 	bl	80007f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f809 	bl	80001f2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f90e 	bl	8000400 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f8dc 	bl	80003a0 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001e8:	f000 f864 	bl	80002b4 <MX_CAN_Init>
  MX_I2C1_Init();
 80001ec:	f000 f898 	bl	8000320 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0x1c>

080001f2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f2:	b580      	push	{r7, lr}
 80001f4:	b0a6      	sub	sp, #152	; 0x98
 80001f6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001fc:	2228      	movs	r2, #40	; 0x28
 80001fe:	2100      	movs	r1, #0
 8000200:	4618      	mov	r0, r3
 8000202:	f003 fb2f 	bl	8003864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000206:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2258      	movs	r2, #88	; 0x58
 800021a:	2100      	movs	r1, #0
 800021c:	4618      	mov	r0, r3
 800021e:	f003 fb21 	bl	8003864 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000222:	2302      	movs	r3, #2
 8000224:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000230:	2302      	movs	r3, #2
 8000232:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800023e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fa67 	bl	8001724 <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025c:	f000 f956 	bl	800050c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800027a:	2102      	movs	r1, #2
 800027c:	4618      	mov	r0, r3
 800027e:	f002 faa5 	bl	80027cc <HAL_RCC_ClockConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000288:	f000 f940 	bl	800050c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800028c:	2322      	movs	r3, #34	; 0x22
 800028e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000290:	2300      	movs	r3, #0
 8000292:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fccc 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80002a6:	f000 f931 	bl	800050c <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3798      	adds	r7, #152	; 0x98
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80002b8:	4b17      	ldr	r3, [pc, #92]	; (8000318 <MX_CAN_Init+0x64>)
 80002ba:	4a18      	ldr	r2, [pc, #96]	; (800031c <MX_CAN_Init+0x68>)
 80002bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 32;
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <MX_CAN_Init+0x64>)
 80002c0:	2220      	movs	r2, #32
 80002c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80002c4:	4b14      	ldr	r3, [pc, #80]	; (8000318 <MX_CAN_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <MX_CAN_Init+0x64>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_CAN_Init+0x64>)
 80002d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002d6:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_CAN_Init+0x64>)
 80002da:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80002de:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <MX_CAN_Init+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <MX_CAN_Init+0x64>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002ec:	4b0a      	ldr	r3, [pc, #40]	; (8000318 <MX_CAN_Init+0x64>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <MX_CAN_Init+0x64>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <MX_CAN_Init+0x64>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <MX_CAN_Init+0x64>)
 8000300:	2200      	movs	r2, #0
 8000302:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000304:	4804      	ldr	r0, [pc, #16]	; (8000318 <MX_CAN_Init+0x64>)
 8000306:	f000 fadb 	bl	80008c0 <HAL_CAN_Init>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000310:	f000 f8fc 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000028 	.word	0x20000028
 800031c:	40006400 	.word	0x40006400

08000320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_I2C1_Init+0x74>)
 8000326:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <MX_I2C1_Init+0x78>)
 8000328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_I2C1_Init+0x74>)
 800032c:	4a1b      	ldr	r2, [pc, #108]	; (800039c <MX_I2C1_Init+0x7c>)
 800032e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <MX_I2C1_Init+0x74>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <MX_I2C1_Init+0x74>)
 8000338:	2201      	movs	r2, #1
 800033a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <MX_I2C1_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000342:	4b14      	ldr	r3, [pc, #80]	; (8000394 <MX_I2C1_Init+0x74>)
 8000344:	2200      	movs	r2, #0
 8000346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <MX_I2C1_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800034e:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_I2C1_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000354:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <MX_I2C1_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800035a:	480e      	ldr	r0, [pc, #56]	; (8000394 <MX_I2C1_Init+0x74>)
 800035c:	f001 f8bb 	bl	80014d6 <HAL_I2C_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000366:	f000 f8d1 	bl	800050c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036a:	2100      	movs	r1, #0
 800036c:	4809      	ldr	r0, [pc, #36]	; (8000394 <MX_I2C1_Init+0x74>)
 800036e:	f001 f941 	bl	80015f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000378:	f000 f8c8 	bl	800050c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800037c:	2100      	movs	r1, #0
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_I2C1_Init+0x74>)
 8000380:	f001 f983 	bl	800168a <HAL_I2CEx_ConfigDigitalFilter>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800038a:	f000 f8bf 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000050 	.word	0x20000050
 8000398:	40005400 	.word	0x40005400
 800039c:	2000090e 	.word	0x2000090e

080003a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a4:	4b14      	ldr	r3, [pc, #80]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <MX_USART2_UART_Init+0x5c>)
 80003a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003c6:	220c      	movs	r2, #12
 80003c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003de:	2200      	movs	r2, #0
 80003e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e2:	4805      	ldr	r0, [pc, #20]	; (80003f8 <MX_USART2_UART_Init+0x58>)
 80003e4:	f002 fe46 	bl	8003074 <HAL_UART_Init>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ee:	f000 f88d 	bl	800050c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2000009c 	.word	0x2000009c
 80003fc:	40004400 	.word	0x40004400

08000400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b08a      	sub	sp, #40	; 0x28
 8000404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000406:	f107 0314 	add.w	r3, r7, #20
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	605a      	str	r2, [r3, #4]
 8000410:	609a      	str	r2, [r3, #8]
 8000412:	60da      	str	r2, [r3, #12]
 8000414:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4b3b      	ldr	r3, [pc, #236]	; (8000504 <MX_GPIO_Init+0x104>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a3a      	ldr	r2, [pc, #232]	; (8000504 <MX_GPIO_Init+0x104>)
 800041c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b38      	ldr	r3, [pc, #224]	; (8000504 <MX_GPIO_Init+0x104>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800042a:	613b      	str	r3, [r7, #16]
 800042c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042e:	4b35      	ldr	r3, [pc, #212]	; (8000504 <MX_GPIO_Init+0x104>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a34      	ldr	r2, [pc, #208]	; (8000504 <MX_GPIO_Init+0x104>)
 8000434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b32      	ldr	r3, [pc, #200]	; (8000504 <MX_GPIO_Init+0x104>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b2f      	ldr	r3, [pc, #188]	; (8000504 <MX_GPIO_Init+0x104>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a2e      	ldr	r2, [pc, #184]	; (8000504 <MX_GPIO_Init+0x104>)
 800044c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b2c      	ldr	r3, [pc, #176]	; (8000504 <MX_GPIO_Init+0x104>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800045a:	60bb      	str	r3, [r7, #8]
 800045c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b29      	ldr	r3, [pc, #164]	; (8000504 <MX_GPIO_Init+0x104>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a28      	ldr	r2, [pc, #160]	; (8000504 <MX_GPIO_Init+0x104>)
 8000464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b26      	ldr	r3, [pc, #152]	; (8000504 <MX_GPIO_Init+0x104>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Debounce2_Pin|Switch_LED_Pin|Floor_Switch_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f241 4104 	movw	r1, #5124	; 0x1404
 800047c:	4822      	ldr	r0, [pc, #136]	; (8000508 <MX_GPIO_Init+0x108>)
 800047e:	f000 ffef 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Debouce1_Pin, GPIO_PIN_RESET);
 8000482:	2200      	movs	r2, #0
 8000484:	f248 0120 	movw	r1, #32800	; 0x8020
 8000488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800048c:	f000 ffe8 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000496:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800049a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049c:	2300      	movs	r3, #0
 800049e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004a0:	f107 0314 	add.w	r3, r7, #20
 80004a4:	4619      	mov	r1, r3
 80004a6:	4818      	ldr	r0, [pc, #96]	; (8000508 <MX_GPIO_Init+0x108>)
 80004a8:	f000 fe50 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : Debounce2_Pin Switch_LED_Pin Floor_Switch_Pin */
  GPIO_InitStruct.Pin = Debounce2_Pin|Switch_LED_Pin|Floor_Switch_Pin;
 80004ac:	f241 4304 	movw	r3, #5124	; 0x1404
 80004b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2300      	movs	r3, #0
 80004bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004be:	f107 0314 	add.w	r3, r7, #20
 80004c2:	4619      	mov	r1, r3
 80004c4:	4810      	ldr	r0, [pc, #64]	; (8000508 <MX_GPIO_Init+0x108>)
 80004c6:	f000 fe41 	bl	800114c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Debouce1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Debouce1_Pin;
 80004ca:	f248 0320 	movw	r3, #32800	; 0x8020
 80004ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4619      	mov	r1, r3
 80004e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e6:	f000 fe31 	bl	800114c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2100      	movs	r1, #0
 80004ee:	2028      	movs	r0, #40	; 0x28
 80004f0:	f000 fdf5 	bl	80010de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004f4:	2028      	movs	r0, #40	; 0x28
 80004f6:	f000 fe0e 	bl	8001116 <HAL_NVIC_EnableIRQ>

}
 80004fa:	bf00      	nop
 80004fc:	3728      	adds	r7, #40	; 0x28
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40021000 	.word	0x40021000
 8000508:	48000800 	.word	0x48000800

0800050c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000510:	b672      	cpsid	i
}
 8000512:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000514:	e7fe      	b.n	8000514 <Error_Handler+0x8>
	...

08000518 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_MspInit+0x44>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <HAL_MspInit+0x44>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6193      	str	r3, [r2, #24]
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_MspInit+0x44>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	4b09      	ldr	r3, [pc, #36]	; (800055c <HAL_MspInit+0x44>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	4a08      	ldr	r2, [pc, #32]	; (800055c <HAL_MspInit+0x44>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	61d3      	str	r3, [r2, #28]
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_MspInit+0x44>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800054e:	2007      	movs	r0, #7
 8000550:	f000 fdba 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000554:	bf00      	nop
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000

08000560 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08a      	sub	sp, #40	; 0x28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a1c      	ldr	r2, [pc, #112]	; (80005f0 <HAL_CAN_MspInit+0x90>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d131      	bne.n	80005e6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <HAL_CAN_MspInit+0x94>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <HAL_CAN_MspInit+0x94>)
 8000588:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <HAL_CAN_MspInit+0x94>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <HAL_CAN_MspInit+0x94>)
 800059c:	695b      	ldr	r3, [r3, #20]
 800059e:	4a15      	ldr	r2, [pc, #84]	; (80005f4 <HAL_CAN_MspInit+0x94>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	6153      	str	r3, [r2, #20]
 80005a6:	4b13      	ldr	r3, [pc, #76]	; (80005f4 <HAL_CAN_MspInit+0x94>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b8:	2302      	movs	r3, #2
 80005ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c0:	2303      	movs	r3, #3
 80005c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005c4:	2309      	movs	r3, #9
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f000 fdbb 	bl	800114c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2014      	movs	r0, #20
 80005dc:	f000 fd7f 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80005e0:	2014      	movs	r0, #20
 80005e2:	f000 fd98 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80005e6:	bf00      	nop
 80005e8:	3728      	adds	r7, #40	; 0x28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40006400 	.word	0x40006400
 80005f4:	40021000 	.word	0x40021000

080005f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b08a      	sub	sp, #40	; 0x28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a17      	ldr	r2, [pc, #92]	; (8000674 <HAL_I2C_MspInit+0x7c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d127      	bne.n	800066a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <HAL_I2C_MspInit+0x80>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a16      	ldr	r2, [pc, #88]	; (8000678 <HAL_I2C_MspInit+0x80>)
 8000620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <HAL_I2C_MspInit+0x80>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000632:	23c0      	movs	r3, #192	; 0xc0
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000636:	2312      	movs	r3, #18
 8000638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000642:	2304      	movs	r3, #4
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <HAL_I2C_MspInit+0x84>)
 800064e:	f000 fd7d 	bl	800114c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_I2C_MspInit+0x80>)
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	4a08      	ldr	r2, [pc, #32]	; (8000678 <HAL_I2C_MspInit+0x80>)
 8000658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065c:	61d3      	str	r3, [r2, #28]
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <HAL_I2C_MspInit+0x80>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800066a:	bf00      	nop
 800066c:	3728      	adds	r7, #40	; 0x28
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40005400 	.word	0x40005400
 8000678:	40021000 	.word	0x40021000
 800067c:	48000400 	.word	0x48000400

08000680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a17      	ldr	r2, [pc, #92]	; (80006fc <HAL_UART_MspInit+0x7c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d128      	bne.n	80006f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_UART_MspInit+0x80>)
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006d2:	230c      	movs	r3, #12
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006e2:	2307      	movs	r3, #7
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f0:	f000 fd2c 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40004400 	.word	0x40004400
 8000700:	40021000 	.word	0x40021000

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f896 	bl	8000880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800075e:	f000 f9aa 	bl	8000ab6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000028 	.word	0x20000028

0800076c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000770:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000774:	f000 fe8c 	bl	8001490 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <SystemInit+0x20>)
 8000782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <SystemInit+0x20>)
 8000788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800078c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490e      	ldr	r1, [pc, #56]	; (80007e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0e      	ldr	r2, [pc, #56]	; (80007e4 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0b      	ldr	r4, [pc, #44]	; (80007ec <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ca:	f7ff ffd7 	bl	800077c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ce:	f003 f825 	bl	800381c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007d2:	f7ff fcff 	bl	80001d4 <main>

080007d6 <LoopForever>:

LoopForever:
    b LoopForever
 80007d6:	e7fe      	b.n	80007d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80007dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007e4:	080038cc 	.word	0x080038cc
  ldr r2, =_sbss
 80007e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007ec:	20000124 	.word	0x20000124

080007f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007f0:	e7fe      	b.n	80007f0 <ADC1_2_IRQHandler>
	...

080007f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <HAL_Init+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a07      	ldr	r2, [pc, #28]	; (800081c <HAL_Init+0x28>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000804:	2003      	movs	r0, #3
 8000806:	f000 fc5f 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080a:	2000      	movs	r0, #0
 800080c:	f000 f808 	bl	8000820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000810:	f7ff fe82 	bl	8000518 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000814:	2300      	movs	r3, #0
}
 8000816:	4618      	mov	r0, r3
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40022000 	.word	0x40022000

08000820 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_InitTick+0x54>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_InitTick+0x58>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	fbb3 f3f1 	udiv	r3, r3, r1
 800083a:	fbb2 f3f3 	udiv	r3, r2, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fc77 	bl	8001132 <HAL_SYSTICK_Config>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e00e      	b.n	800086c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2b0f      	cmp	r3, #15
 8000852:	d80a      	bhi.n	800086a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000854:	2200      	movs	r2, #0
 8000856:	6879      	ldr	r1, [r7, #4]
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	f000 fc3f 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000860:	4a06      	ldr	r2, [pc, #24]	; (800087c <HAL_InitTick+0x5c>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e000      	b.n	800086c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086a:	2301      	movs	r3, #1
}
 800086c:	4618      	mov	r0, r3
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000000 	.word	0x20000000
 8000878:	20000008 	.word	0x20000008
 800087c:	20000004 	.word	0x20000004

08000880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_IncTick+0x20>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_IncTick+0x24>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <HAL_IncTick+0x24>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	20000008 	.word	0x20000008
 80008a4:	20000120 	.word	0x20000120

080008a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_GetTick+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000120 	.word	0x20000120

080008c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e0ed      	b.n	8000aae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff fe3e 	bl	8000560 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f042 0201 	orr.w	r2, r2, #1
 80008f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008f4:	f7ff ffd8 	bl	80008a8 <HAL_GetTick>
 80008f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80008fa:	e012      	b.n	8000922 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008fc:	f7ff ffd4 	bl	80008a8 <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	2b0a      	cmp	r3, #10
 8000908:	d90b      	bls.n	8000922 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2205      	movs	r2, #5
 800091a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e0c5      	b.n	8000aae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f003 0301 	and.w	r3, r3, #1
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0e5      	beq.n	80008fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f022 0202 	bic.w	r2, r2, #2
 800093e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000940:	f7ff ffb2 	bl	80008a8 <HAL_GetTick>
 8000944:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000946:	e012      	b.n	800096e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000948:	f7ff ffae 	bl	80008a8 <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	2b0a      	cmp	r3, #10
 8000954:	d90b      	bls.n	800096e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2205      	movs	r2, #5
 8000966:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e09f      	b.n	8000aae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	f003 0302 	and.w	r3, r3, #2
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1e5      	bne.n	8000948 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	7e1b      	ldrb	r3, [r3, #24]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d108      	bne.n	8000996 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	e007      	b.n	80009a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7e5b      	ldrb	r3, [r3, #25]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d108      	bne.n	80009c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	e007      	b.n	80009d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7e9b      	ldrb	r3, [r3, #26]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d108      	bne.n	80009ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f042 0220 	orr.w	r2, r2, #32
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	e007      	b.n	80009fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0220 	bic.w	r2, r2, #32
 80009f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7edb      	ldrb	r3, [r3, #27]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d108      	bne.n	8000a14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f022 0210 	bic.w	r2, r2, #16
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	e007      	b.n	8000a24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 0210 	orr.w	r2, r2, #16
 8000a22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7f1b      	ldrb	r3, [r3, #28]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d108      	bne.n	8000a3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f042 0208 	orr.w	r2, r2, #8
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e007      	b.n	8000a4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 0208 	bic.w	r2, r2, #8
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7f5b      	ldrb	r3, [r3, #29]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d108      	bne.n	8000a68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f042 0204 	orr.w	r2, r2, #4
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f022 0204 	bic.w	r2, r2, #4
 8000a76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	431a      	orrs	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	691b      	ldr	r3, [r3, #16]
 8000a86:	431a      	orrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	ea42 0103 	orr.w	r1, r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	1e5a      	subs	r2, r3, #1
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b08a      	sub	sp, #40	; 0x28
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d07c      	beq.n	8000bf6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d023      	beq.n	8000b4e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000b0e:	69bb      	ldr	r3, [r7, #24]
 8000b10:	f003 0302 	and.w	r3, r3, #2
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f983 	bl	8000e24 <HAL_CAN_TxMailbox0CompleteCallback>
 8000b1e:	e016      	b.n	8000b4e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d004      	beq.n	8000b34 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
 8000b32:	e00c      	b.n	8000b4e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	f003 0308 	and.w	r3, r3, #8
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d004      	beq.n	8000b48 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
 8000b46:	e002      	b.n	8000b4e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 f989 	bl	8000e60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d024      	beq.n	8000ba2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f000 f963 	bl	8000e38 <HAL_CAN_TxMailbox1CompleteCallback>
 8000b72:	e016      	b.n	8000ba2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d004      	beq.n	8000b88 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
 8000b86:	e00c      	b.n	8000ba2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d004      	beq.n	8000b9c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
 8000b9a:	e002      	b.n	8000ba2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f000 f969 	bl	8000e74 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d024      	beq.n	8000bf6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d003      	beq.n	8000bc8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f000 f943 	bl	8000e4c <HAL_CAN_TxMailbox2CompleteCallback>
 8000bc6:	e016      	b.n	8000bf6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d004      	beq.n	8000bdc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bda:	e00c      	b.n	8000bf6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d004      	beq.n	8000bf0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
 8000bee:	e002      	b.n	8000bf6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 f949 	bl	8000e88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000bf6:	6a3b      	ldr	r3, [r7, #32]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00c      	beq.n	8000c1a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f003 0310 	and.w	r3, r3, #16
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d007      	beq.n	8000c1a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2210      	movs	r2, #16
 8000c18:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	f003 0304 	and.w	r3, r3, #4
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d00b      	beq.n	8000c3c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d006      	beq.n	8000c3c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2208      	movs	r2, #8
 8000c34:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f93a 	bl	8000eb0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d009      	beq.n	8000c5a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 f921 	bl	8000e9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00c      	beq.n	8000c7e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d007      	beq.n	8000c7e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2210      	movs	r2, #16
 8000c7c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000c7e:	6a3b      	ldr	r3, [r7, #32]
 8000c80:	f003 0320 	and.w	r3, r3, #32
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d00b      	beq.n	8000ca0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	f003 0308 	and.w	r3, r3, #8
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2208      	movs	r2, #8
 8000c98:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f000 f91c 	bl	8000ed8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ca0:	6a3b      	ldr	r3, [r7, #32]
 8000ca2:	f003 0310 	and.w	r3, r3, #16
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d009      	beq.n	8000cbe <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	f003 0303 	and.w	r3, r3, #3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f000 f903 	bl	8000ec4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00b      	beq.n	8000ce0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d006      	beq.n	8000ce0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2210      	movs	r2, #16
 8000cd8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f000 f906 	bl	8000eec <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00b      	beq.n	8000d02 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	f003 0308 	and.w	r3, r3, #8
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d006      	beq.n	8000d02 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f8ff 	bl	8000f00 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000d02:	6a3b      	ldr	r3, [r7, #32]
 8000d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d07b      	beq.n	8000e04 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d072      	beq.n	8000dfc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d008      	beq.n	8000d4e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d008      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d003      	beq.n	8000d6a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d6a:	6a3b      	ldr	r3, [r7, #32]
 8000d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d043      	beq.n	8000dfc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d03e      	beq.n	8000dfc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000d84:	2b60      	cmp	r3, #96	; 0x60
 8000d86:	d02b      	beq.n	8000de0 <HAL_CAN_IRQHandler+0x32a>
 8000d88:	2b60      	cmp	r3, #96	; 0x60
 8000d8a:	d82e      	bhi.n	8000dea <HAL_CAN_IRQHandler+0x334>
 8000d8c:	2b50      	cmp	r3, #80	; 0x50
 8000d8e:	d022      	beq.n	8000dd6 <HAL_CAN_IRQHandler+0x320>
 8000d90:	2b50      	cmp	r3, #80	; 0x50
 8000d92:	d82a      	bhi.n	8000dea <HAL_CAN_IRQHandler+0x334>
 8000d94:	2b40      	cmp	r3, #64	; 0x40
 8000d96:	d019      	beq.n	8000dcc <HAL_CAN_IRQHandler+0x316>
 8000d98:	2b40      	cmp	r3, #64	; 0x40
 8000d9a:	d826      	bhi.n	8000dea <HAL_CAN_IRQHandler+0x334>
 8000d9c:	2b30      	cmp	r3, #48	; 0x30
 8000d9e:	d010      	beq.n	8000dc2 <HAL_CAN_IRQHandler+0x30c>
 8000da0:	2b30      	cmp	r3, #48	; 0x30
 8000da2:	d822      	bhi.n	8000dea <HAL_CAN_IRQHandler+0x334>
 8000da4:	2b10      	cmp	r3, #16
 8000da6:	d002      	beq.n	8000dae <HAL_CAN_IRQHandler+0x2f8>
 8000da8:	2b20      	cmp	r3, #32
 8000daa:	d005      	beq.n	8000db8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000dac:	e01d      	b.n	8000dea <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000db6:	e019      	b.n	8000dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dc0:	e014      	b.n	8000dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	f043 0320 	orr.w	r3, r3, #32
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dca:	e00f      	b.n	8000dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dd4:	e00a      	b.n	8000dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000dde:	e005      	b.n	8000dec <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000de8:	e000      	b.n	8000dec <HAL_CAN_IRQHandler+0x336>
            break;
 8000dea:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	699a      	ldr	r2, [r3, #24]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000dfa:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2204      	movs	r2, #4
 8000e02:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d008      	beq.n	8000e1c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f87c 	bl	8000f14 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff3e 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff31 	bl	8000f8c <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b087      	sub	sp, #28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e160      	b.n	800141e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2101      	movs	r1, #1
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8152 	beq.w	8001418 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b01      	cmp	r3, #1
 800117e:	d005      	beq.n	800118c <HAL_GPIO_Init+0x40>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d130      	bne.n	80011ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68da      	ldr	r2, [r3, #12]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c2:	2201      	movs	r2, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 0201 	and.w	r2, r3, #1
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d017      	beq.n	800122a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	689a      	ldr	r2, [r3, #8]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	2b02      	cmp	r3, #2
 8001234:	d123      	bne.n	800127e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	08da      	lsrs	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	3208      	adds	r2, #8
 800123e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	220f      	movs	r2, #15
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	08da      	lsrs	r2, r3, #3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3208      	adds	r2, #8
 8001278:	6939      	ldr	r1, [r7, #16]
 800127a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	2203      	movs	r2, #3
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43db      	mvns	r3, r3
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4013      	ands	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0203 	and.w	r2, r3, #3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 80ac 	beq.w	8001418 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c0:	4b5e      	ldr	r3, [pc, #376]	; (800143c <HAL_GPIO_Init+0x2f0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a5d      	ldr	r2, [pc, #372]	; (800143c <HAL_GPIO_Init+0x2f0>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b5b      	ldr	r3, [pc, #364]	; (800143c <HAL_GPIO_Init+0x2f0>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d8:	4a59      	ldr	r2, [pc, #356]	; (8001440 <HAL_GPIO_Init+0x2f4>)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001302:	d025      	beq.n	8001350 <HAL_GPIO_Init+0x204>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x2f8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d01f      	beq.n	800134c <HAL_GPIO_Init+0x200>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x2fc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d019      	beq.n	8001348 <HAL_GPIO_Init+0x1fc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x300>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d013      	beq.n	8001344 <HAL_GPIO_Init+0x1f8>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x304>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d00d      	beq.n	8001340 <HAL_GPIO_Init+0x1f4>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x308>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x1f0>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <HAL_GPIO_Init+0x30c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x1ec>
 8001334:	2306      	movs	r3, #6
 8001336:	e00c      	b.n	8001352 <HAL_GPIO_Init+0x206>
 8001338:	2307      	movs	r3, #7
 800133a:	e00a      	b.n	8001352 <HAL_GPIO_Init+0x206>
 800133c:	2305      	movs	r3, #5
 800133e:	e008      	b.n	8001352 <HAL_GPIO_Init+0x206>
 8001340:	2304      	movs	r3, #4
 8001342:	e006      	b.n	8001352 <HAL_GPIO_Init+0x206>
 8001344:	2303      	movs	r3, #3
 8001346:	e004      	b.n	8001352 <HAL_GPIO_Init+0x206>
 8001348:	2302      	movs	r3, #2
 800134a:	e002      	b.n	8001352 <HAL_GPIO_Init+0x206>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <HAL_GPIO_Init+0x206>
 8001350:	2300      	movs	r3, #0
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	f002 0203 	and.w	r2, r2, #3
 8001358:	0092      	lsls	r2, r2, #2
 800135a:	4093      	lsls	r3, r2
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001362:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x2f4>)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3302      	adds	r3, #2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001370:	4b3a      	ldr	r3, [pc, #232]	; (800145c <HAL_GPIO_Init+0x310>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001394:	4a31      	ldr	r2, [pc, #196]	; (800145c <HAL_GPIO_Init+0x310>)
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800139a:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_GPIO_Init+0x310>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_GPIO_Init+0x310>)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_GPIO_Init+0x310>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4013      	ands	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013e8:	4a1c      	ldr	r2, [pc, #112]	; (800145c <HAL_GPIO_Init+0x310>)
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_GPIO_Init+0x310>)
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001412:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_GPIO_Init+0x310>)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	3301      	adds	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	f47f ae97 	bne.w	800115c <HAL_GPIO_Init+0x10>
  }
}
 800142e:	bf00      	nop
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48001000 	.word	0x48001000
 8001454:	48001400 	.word	0x48001400
 8001458:	48001800 	.word	0x48001800
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014a8:	88fb      	ldrh	r3, [r7, #6]
 80014aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f806 	bl	80014c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e081      	b.n	80015ec <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d106      	bne.n	8001502 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff f87b 	bl	80005f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2224      	movs	r2, #36	; 0x24
 8001506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0201 	bic.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001526:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001536:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	e006      	b.n	800155e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800155c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d104      	bne.n	8001570 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800156e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800157e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001582:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001592:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69d9      	ldr	r1, [r3, #28]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a1a      	ldr	r2, [r3, #32]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0201 	orr.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b20      	cmp	r3, #32
 8001608:	d138      	bne.n	800167c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001614:	2302      	movs	r3, #2
 8001616:	e032      	b.n	800167e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2224      	movs	r2, #36	; 0x24
 8001624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6819      	ldr	r1, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f042 0201 	orr.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2220      	movs	r2, #32
 800166c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	e000      	b.n	800167e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800167c:	2302      	movs	r3, #2
  }
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b20      	cmp	r3, #32
 800169e:	d139      	bne.n	8001714 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e033      	b.n	8001716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2224      	movs	r2, #36	; 0x24
 80016ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80016dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2220      	movs	r2, #32
 8001704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e000      	b.n	8001716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001714:	2302      	movs	r3, #2
  }
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800172a:	af00      	add	r7, sp, #0
 800172c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001730:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001734:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001736:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800173a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	f001 b83a 	b.w	80027be <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 816f 	beq.w	8001a3e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001760:	4bb5      	ldr	r3, [pc, #724]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b04      	cmp	r3, #4
 800176a:	d00c      	beq.n	8001786 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800176c:	4bb2      	ldr	r3, [pc, #712]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d15c      	bne.n	8001832 <HAL_RCC_OscConfig+0x10e>
 8001778:	4baf      	ldr	r3, [pc, #700]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001784:	d155      	bne.n	8001832 <HAL_RCC_OscConfig+0x10e>
 8001786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800178a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001792:	fa93 f3a3 	rbit	r3, r3
 8001796:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800179a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179e:	fab3 f383 	clz	r3, r3
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	095b      	lsrs	r3, r3, #5
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d102      	bne.n	80017b8 <HAL_RCC_OscConfig+0x94>
 80017b2:	4ba1      	ldr	r3, [pc, #644]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	e015      	b.n	80017e4 <HAL_RCC_OscConfig+0xc0>
 80017b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017bc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80017c4:	fa93 f3a3 	rbit	r3, r3
 80017c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80017cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017e0:	4b95      	ldr	r3, [pc, #596]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017e8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80017ec:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80017f0:	fa92 f2a2 	rbit	r2, r2
 80017f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80017f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017fc:	fab2 f282 	clz	r2, r2
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	f042 0220 	orr.w	r2, r2, #32
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f002 021f 	and.w	r2, r2, #31
 800180c:	2101      	movs	r1, #1
 800180e:	fa01 f202 	lsl.w	r2, r1, r2
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 8111 	beq.w	8001a3c <HAL_RCC_OscConfig+0x318>
 800181a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f040 8108 	bne.w	8001a3c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	f000 bfc6 	b.w	80027be <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001836:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x12e>
 8001844:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7b      	ldr	r2, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e036      	b.n	80018c0 <HAL_RCC_OscConfig+0x19c>
 8001852:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001856:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10c      	bne.n	800187c <HAL_RCC_OscConfig+0x158>
 8001862:	4b75      	ldr	r3, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a74      	ldr	r2, [pc, #464]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	4b72      	ldr	r3, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a71      	ldr	r2, [pc, #452]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e021      	b.n	80018c0 <HAL_RCC_OscConfig+0x19c>
 800187c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001880:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x184>
 800188e:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a69      	ldr	r2, [pc, #420]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a66      	ldr	r2, [pc, #408]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0x19c>
 80018a8:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a62      	ldr	r2, [pc, #392]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b60      	ldr	r3, [pc, #384]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a5f      	ldr	r2, [pc, #380]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d059      	beq.n	8001984 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7fe ffea 	bl	80008a8 <HAL_GetTick>
 80018d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018da:	f7fe ffe5 	bl	80008a8 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d902      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f000 bf67 	b.w	80027be <HAL_RCC_OscConfig+0x109a>
 80018f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001904:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	b2db      	uxtb	r3, r3
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x1fe>
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	e015      	b.n	800194e <HAL_RCC_OscConfig+0x22a>
 8001922:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001926:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800192e:	fa93 f3a3 	rbit	r3, r3
 8001932:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800193e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 800194c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001952:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001956:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800195a:	fa92 f2a2 	rbit	r2, r2
 800195e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001962:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001966:	fab2 f282 	clz	r2, r2
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f042 0220 	orr.w	r2, r2, #32
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f002 021f 	and.w	r2, r2, #31
 8001976:	2101      	movs	r1, #1
 8001978:	fa01 f202 	lsl.w	r2, r1, r2
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ab      	beq.n	80018da <HAL_RCC_OscConfig+0x1b6>
 8001982:	e05c      	b.n	8001a3e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7fe ff90 	bl	80008a8 <HAL_GetTick>
 8001988:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198c:	e00a      	b.n	80019a4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198e:	f7fe ff8b 	bl	80008a8 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d902      	bls.n	80019a4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	f000 bf0d 	b.w	80027be <HAL_RCC_OscConfig+0x109a>
 80019a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80019b0:	fa93 f3a3 	rbit	r3, r3
 80019b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80019b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019bc:	fab3 f383 	clz	r3, r3
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d102      	bne.n	80019d6 <HAL_RCC_OscConfig+0x2b2>
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	e015      	b.n	8001a02 <HAL_RCC_OscConfig+0x2de>
 80019d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80019e2:	fa93 f3a3 	rbit	r3, r3
 80019e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80019ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_RCC_OscConfig+0x314>)
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a06:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a0a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a0e:	fa92 f2a2 	rbit	r2, r2
 8001a12:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a16:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a1a:	fab2 f282 	clz	r2, r2
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	f042 0220 	orr.w	r2, r2, #32
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	f002 021f 	and.w	r2, r2, #31
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a30:	4013      	ands	r3, r2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1ab      	bne.n	800198e <HAL_RCC_OscConfig+0x26a>
 8001a36:	e002      	b.n	8001a3e <HAL_RCC_OscConfig+0x31a>
 8001a38:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a42:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 817f 	beq.w	8001d52 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a54:	4ba7      	ldr	r3, [pc, #668]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a60:	4ba4      	ldr	r3, [pc, #656]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d173      	bne.n	8001b54 <HAL_RCC_OscConfig+0x430>
 8001a6c:	4ba1      	ldr	r3, [pc, #644]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a78:	d16c      	bne.n	8001b54 <HAL_RCC_OscConfig+0x430>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001a8c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x386>
 8001aa4:	4b93      	ldr	r3, [pc, #588]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e013      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3ae>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ab4:	fa93 f3a3 	rbit	r3, r3
 8001ab8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001abc:	2302      	movs	r3, #2
 8001abe:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ac2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ace:	4b89      	ldr	r3, [pc, #548]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ad8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001adc:	fa92 f2a2 	rbit	r2, r2
 8001ae0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001ae4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ae8:	fab2 f282 	clz	r2, r2
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	f042 0220 	orr.w	r2, r2, #32
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	f002 021f 	and.w	r2, r2, #31
 8001af8:	2101      	movs	r1, #1
 8001afa:	fa01 f202 	lsl.w	r2, r1, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <HAL_RCC_OscConfig+0x3f6>
 8001b04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b08:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d002      	beq.n	8001b1a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f000 be52 	b.w	80027be <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	21f8      	movs	r1, #248	; 0xf8
 8001b30:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b34:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001b38:	fa91 f1a1 	rbit	r1, r1
 8001b3c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b40:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b44:	fab1 f181 	clz	r1, r1
 8001b48:	b2c9      	uxtb	r1, r1
 8001b4a:	408b      	lsls	r3, r1
 8001b4c:	4969      	ldr	r1, [pc, #420]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b52:	e0fe      	b.n	8001d52 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b58:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8088 	beq.w	8001c76 <HAL_RCC_OscConfig+0x552>
 8001b66:	2301      	movs	r3, #1
 8001b68:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001b78:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b86:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2301      	movs	r3, #1
 8001b90:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7fe fe89 	bl	80008a8 <HAL_GetTick>
 8001b96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7fe fe84 	bl	80008a8 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d902      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	f000 be06 	b.w	80027be <HAL_RCC_OscConfig+0x109a>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001bbc:	fa93 f3a3 	rbit	r3, r3
 8001bc0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001bc4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d102      	bne.n	8001be2 <HAL_RCC_OscConfig+0x4be>
 8001bdc:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	e013      	b.n	8001c0a <HAL_RCC_OscConfig+0x4e6>
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bfa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c06:	4b3b      	ldr	r3, [pc, #236]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c10:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c14:	fa92 f2a2 	rbit	r2, r2
 8001c18:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c1c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c20:	fab2 f282 	clz	r2, r2
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	f042 0220 	orr.w	r2, r2, #32
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	f002 021f 	and.w	r2, r2, #31
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0af      	beq.n	8001b9c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	21f8      	movs	r1, #248	; 0xf8
 8001c52:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c5a:	fa91 f1a1 	rbit	r1, r1
 8001c5e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001c62:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c66:	fab1 f181 	clz	r1, r1
 8001c6a:	b2c9      	uxtb	r1, r1
 8001c6c:	408b      	lsls	r3, r1
 8001c6e:	4921      	ldr	r1, [pc, #132]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e06d      	b.n	8001d52 <HAL_RCC_OscConfig+0x62e>
 8001c76:	2301      	movs	r3, #1
 8001c78:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7fe fe01 	bl	80008a8 <HAL_GetTick>
 8001ca6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7fe fdfc 	bl	80008a8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d902      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	f000 bd7e 	b.w	80027be <HAL_RCC_OscConfig+0x109a>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ccc:	fa93 f3a3 	rbit	r3, r3
 8001cd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001cd4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd8:	fab3 f383 	clz	r3, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5d4>
 8001cec:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <HAL_RCC_OscConfig+0x5d0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	e016      	b.n	8001d20 <HAL_RCC_OscConfig+0x5fc>
 8001cf2:	bf00      	nop
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d02:	fa93 f3a3 	rbit	r3, r3
 8001d06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d14:	fa93 f3a3 	rbit	r3, r3
 8001d18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d1c:	4bbf      	ldr	r3, [pc, #764]	; (800201c <HAL_RCC_OscConfig+0x8f8>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	2202      	movs	r2, #2
 8001d22:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d26:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d2a:	fa92 f2a2 	rbit	r2, r2
 8001d2e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d32:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d36:	fab2 f282 	clz	r2, r2
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f042 0220 	orr.w	r2, r2, #32
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f002 021f 	and.w	r2, r2, #31
 8001d46:	2101      	movs	r1, #1
 8001d48:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1ac      	bne.n	8001cac <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8113 	beq.w	8001f8e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d07c      	beq.n	8001e72 <HAL_RCC_OscConfig+0x74e>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d82:	fa93 f3a3 	rbit	r3, r3
 8001d86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001d8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	461a      	mov	r2, r3
 8001d96:	4ba2      	ldr	r3, [pc, #648]	; (8002020 <HAL_RCC_OscConfig+0x8fc>)
 8001d98:	4413      	add	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2301      	movs	r3, #1
 8001da0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da2:	f7fe fd81 	bl	80008a8 <HAL_GetTick>
 8001da6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001daa:	e00a      	b.n	8001dc2 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dac:	f7fe fd7c 	bl	80008a8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d902      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	f000 bcfe 	b.w	80027be <HAL_RCC_OscConfig+0x109a>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dd4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001de2:	2202      	movs	r2, #2
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	fa93 f2a3 	rbit	r2, r3
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e02:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e06:	2202      	movs	r2, #2
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	fa93 f2a3 	rbit	r2, r3
 8001e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	4b7e      	ldr	r3, [pc, #504]	; (800201c <HAL_RCC_OscConfig+0x8f8>)
 8001e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e2e:	2102      	movs	r1, #2
 8001e30:	6019      	str	r1, [r3, #0]
 8001e32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f1a3 	rbit	r1, r3
 8001e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e44:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e48:	6019      	str	r1, [r3, #0]
  return result;
 8001e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2101      	movs	r1, #1
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d09d      	beq.n	8001dac <HAL_RCC_OscConfig+0x688>
 8001e70:	e08d      	b.n	8001f8e <HAL_RCC_OscConfig+0x86a>
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	fa93 f2a3 	rbit	r2, r3
 8001e8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e94:	601a      	str	r2, [r3, #0]
  return result;
 8001e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001e9e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea0:	fab3 f383 	clz	r3, r3
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b5d      	ldr	r3, [pc, #372]	; (8002020 <HAL_RCC_OscConfig+0x8fc>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7fe fcf8 	bl	80008a8 <HAL_GetTick>
 8001eb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ebe:	f7fe fcf3 	bl	80008a8 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d902      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f000 bc75 	b.w	80027be <HAL_RCC_OscConfig+0x109a>
 8001ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001edc:	2202      	movs	r2, #2
 8001ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	fa93 f2a3 	rbit	r2, r3
 8001eee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f00:	2202      	movs	r2, #2
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	fa93 f2a3 	rbit	r2, r3
 8001f12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f24:	2202      	movs	r2, #2
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	fa93 f2a3 	rbit	r2, r3
 8001f36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f3e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f40:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_RCC_OscConfig+0x8f8>)
 8001f42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	6019      	str	r1, [r3, #0]
 8001f50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f1a3 	rbit	r1, r3
 8001f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f62:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f66:	6019      	str	r1, [r3, #0]
  return result;
 8001f68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	fab3 f383 	clz	r3, r3
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d197      	bne.n	8001ebe <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 81a5 	beq.w	80022ee <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <HAL_RCC_OscConfig+0x8f8>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <HAL_RCC_OscConfig+0x8f8>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	4a18      	ldr	r2, [pc, #96]	; (800201c <HAL_RCC_OscConfig+0x8f8>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	61d3      	str	r3, [r2, #28]
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_RCC_OscConfig+0x8f8>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fdc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_RCC_OscConfig+0x900>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d121      	bne.n	8002034 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_RCC_OscConfig+0x900>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x900>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fc54 	bl	80008a8 <HAL_GetTick>
 8002000:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	e010      	b.n	8002028 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002006:	f7fe fc4f 	bl	80008a8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b64      	cmp	r3, #100	; 0x64
 8002014:	d908      	bls.n	8002028 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e3d1      	b.n	80027be <HAL_RCC_OscConfig+0x109a>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	10908120 	.word	0x10908120
 8002024:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002028:	4b8d      	ldr	r3, [pc, #564]	; (8002260 <HAL_RCC_OscConfig+0xb3c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0e8      	beq.n	8002006 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002038:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d106      	bne.n	8002052 <HAL_RCC_OscConfig+0x92e>
 8002044:	4b87      	ldr	r3, [pc, #540]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a86      	ldr	r2, [pc, #536]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6213      	str	r3, [r2, #32]
 8002050:	e035      	b.n	80020be <HAL_RCC_OscConfig+0x99a>
 8002052:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002056:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x958>
 8002062:	4b80      	ldr	r3, [pc, #512]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a7f      	ldr	r2, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 8002068:	f023 0301 	bic.w	r3, r3, #1
 800206c:	6213      	str	r3, [r2, #32]
 800206e:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a7c      	ldr	r2, [pc, #496]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	e020      	b.n	80020be <HAL_RCC_OscConfig+0x99a>
 800207c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002080:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b05      	cmp	r3, #5
 800208a:	d10c      	bne.n	80020a6 <HAL_RCC_OscConfig+0x982>
 800208c:	4b75      	ldr	r3, [pc, #468]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a74      	ldr	r2, [pc, #464]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6213      	str	r3, [r2, #32]
 8002098:	4b72      	ldr	r3, [pc, #456]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	4a71      	ldr	r2, [pc, #452]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6213      	str	r3, [r2, #32]
 80020a4:	e00b      	b.n	80020be <HAL_RCC_OscConfig+0x99a>
 80020a6:	4b6f      	ldr	r3, [pc, #444]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4a6e      	ldr	r2, [pc, #440]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 80020ac:	f023 0301 	bic.w	r3, r3, #1
 80020b0:	6213      	str	r3, [r2, #32]
 80020b2:	4b6c      	ldr	r3, [pc, #432]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	4a6b      	ldr	r2, [pc, #428]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 8081 	beq.w	80021d2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7fe fbea 	bl	80008a8 <HAL_GetTick>
 80020d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	e00b      	b.n	80020f2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7fe fbe5 	bl	80008a8 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e365      	b.n	80027be <HAL_RCC_OscConfig+0x109a>
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80020fa:	2202      	movs	r2, #2
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002102:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002110:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800211e:	2202      	movs	r2, #2
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002126:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	fa93 f2a3 	rbit	r2, r3
 8002130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002134:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002138:	601a      	str	r2, [r3, #0]
  return result;
 800213a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002142:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	fab3 f383 	clz	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d102      	bne.n	800215e <HAL_RCC_OscConfig+0xa3a>
 8002158:	4b42      	ldr	r3, [pc, #264]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	e013      	b.n	8002186 <HAL_RCC_OscConfig+0xa62>
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002166:	2202      	movs	r2, #2
 8002168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800216e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	fa93 f2a3 	rbit	r2, r3
 8002178:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800218a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800218e:	2102      	movs	r1, #2
 8002190:	6011      	str	r1, [r2, #0]
 8002192:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002196:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800219a:	6812      	ldr	r2, [r2, #0]
 800219c:	fa92 f1a2 	rbit	r1, r2
 80021a0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021a4:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021a8:	6011      	str	r1, [r2, #0]
  return result;
 80021aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ae:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	fab2 f282 	clz	r2, r2
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	f002 021f 	and.w	r2, r2, #31
 80021c4:	2101      	movs	r1, #1
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d084      	beq.n	80020da <HAL_RCC_OscConfig+0x9b6>
 80021d0:	e083      	b.n	80022da <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7fe fb69 	bl	80008a8 <HAL_GetTick>
 80021d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021dc:	f7fe fb64 	bl	80008a8 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e2e4      	b.n	80027be <HAL_RCC_OscConfig+0x109a>
 80021f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80021fc:	2202      	movs	r2, #2
 80021fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002204:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f2a3 	rbit	r2, r3
 800220e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002212:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002228:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	fa93 f2a3 	rbit	r2, r3
 8002232:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002236:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800223a:	601a      	str	r2, [r3, #0]
  return result;
 800223c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002240:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002244:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002246:	fab3 f383 	clz	r3, r3
 800224a:	b2db      	uxtb	r3, r3
 800224c:	095b      	lsrs	r3, r3, #5
 800224e:	b2db      	uxtb	r3, r3
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d106      	bne.n	8002268 <HAL_RCC_OscConfig+0xb44>
 800225a:	4b02      	ldr	r3, [pc, #8]	; (8002264 <HAL_RCC_OscConfig+0xb40>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	e017      	b.n	8002290 <HAL_RCC_OscConfig+0xb6c>
 8002260:	40007000 	.word	0x40007000
 8002264:	40021000 	.word	0x40021000
 8002268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002270:	2202      	movs	r2, #2
 8002272:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002274:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002278:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	fa93 f2a3 	rbit	r2, r3
 8002282:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002286:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	4bb3      	ldr	r3, [pc, #716]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002294:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002298:	2102      	movs	r1, #2
 800229a:	6011      	str	r1, [r2, #0]
 800229c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	fa92 f1a2 	rbit	r1, r2
 80022aa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022ae:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022b2:	6011      	str	r1, [r2, #0]
  return result;
 80022b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022b8:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	fab2 f282 	clz	r2, r2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f002 021f 	and.w	r2, r2, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d180      	bne.n	80021dc <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022da:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e2:	4b9e      	ldr	r3, [pc, #632]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a9d      	ldr	r2, [pc, #628]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 80022e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 825e 	beq.w	80027bc <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002300:	4b96      	ldr	r3, [pc, #600]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	f000 821f 	beq.w	800274c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002312:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b02      	cmp	r3, #2
 800231c:	f040 8170 	bne.w	8002600 <HAL_RCC_OscConfig+0xedc>
 8002320:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002324:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800232c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002332:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002340:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002344:	601a      	str	r2, [r3, #0]
  return result;
 8002346:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800234e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002350:	fab3 f383 	clz	r3, r3
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800235a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	461a      	mov	r2, r3
 8002362:	2300      	movs	r3, #0
 8002364:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002366:	f7fe fa9f 	bl	80008a8 <HAL_GetTick>
 800236a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236e:	e009      	b.n	8002384 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe fa9a 	bl	80008a8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e21c      	b.n	80027be <HAL_RCC_OscConfig+0x109a>
 8002384:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002388:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800238c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002396:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	fa93 f2a3 	rbit	r2, r3
 80023a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023a8:	601a      	str	r2, [r3, #0]
  return result;
 80023aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ae:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_OscConfig+0xcaa>
 80023c8:	4b64      	ldr	r3, [pc, #400]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e027      	b.n	800241e <HAL_RCC_OscConfig+0xcfa>
 80023ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	fa93 f2a3 	rbit	r2, r3
 80023ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80023fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002406:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	fa93 f2a3 	rbit	r2, r3
 8002410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002414:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	4b50      	ldr	r3, [pc, #320]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002422:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002426:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800242a:	6011      	str	r1, [r2, #0]
 800242c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002430:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	fa92 f1a2 	rbit	r1, r2
 800243a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800243e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002442:	6011      	str	r1, [r2, #0]
  return result;
 8002444:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002448:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	fab2 f282 	clz	r2, r2
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	f042 0220 	orr.w	r2, r2, #32
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	f002 021f 	and.w	r2, r2, #31
 800245e:	2101      	movs	r1, #1
 8002460:	fa01 f202 	lsl.w	r2, r1, r2
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d182      	bne.n	8002370 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246a:	4b3c      	ldr	r3, [pc, #240]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f023 020f 	bic.w	r2, r3, #15
 8002472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002476:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	4937      	ldr	r1, [pc, #220]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 8002480:	4313      	orrs	r3, r2
 8002482:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002484:	4b35      	ldr	r3, [pc, #212]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800248c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002490:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6a19      	ldr	r1, [r3, #32]
 8002498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	430b      	orrs	r3, r1
 80024a6:	492d      	ldr	r1, [pc, #180]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024be:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	fa93 f2a3 	rbit	r2, r3
 80024c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024cc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024d0:	601a      	str	r2, [r3, #0]
  return result;
 80024d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024da:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	461a      	mov	r2, r3
 80024ee:	2301      	movs	r3, #1
 80024f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe f9d9 	bl	80008a8 <HAL_GetTick>
 80024f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024fa:	e009      	b.n	8002510 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fc:	f7fe f9d4 	bl	80008a8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e156      	b.n	80027be <HAL_RCC_OscConfig+0x109a>
 8002510:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002514:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002518:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002522:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	fa93 f2a3 	rbit	r2, r3
 800252c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002530:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002534:	601a      	str	r2, [r3, #0]
  return result;
 8002536:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800253a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800253e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002540:	fab3 f383 	clz	r3, r3
 8002544:	b2db      	uxtb	r3, r3
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d105      	bne.n	8002560 <HAL_RCC_OscConfig+0xe3c>
 8002554:	4b01      	ldr	r3, [pc, #4]	; (800255c <HAL_RCC_OscConfig+0xe38>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	e02a      	b.n	80025b0 <HAL_RCC_OscConfig+0xe8c>
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002564:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002572:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	fa93 f2a3 	rbit	r2, r3
 800257c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002580:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800258e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	fa93 f2a3 	rbit	r2, r3
 80025a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a6:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	4b86      	ldr	r3, [pc, #536]	; (80027c8 <HAL_RCC_OscConfig+0x10a4>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025b4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025bc:	6011      	str	r1, [r2, #0]
 80025be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025c2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	fa92 f1a2 	rbit	r1, r2
 80025cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025d0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80025d4:	6011      	str	r1, [r2, #0]
  return result;
 80025d6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025da:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	fab2 f282 	clz	r2, r2
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f042 0220 	orr.w	r2, r2, #32
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f002 021f 	and.w	r2, r2, #31
 80025f0:	2101      	movs	r1, #1
 80025f2:	fa01 f202 	lsl.w	r2, r1, r2
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f43f af7f 	beq.w	80024fc <HAL_RCC_OscConfig+0xdd8>
 80025fe:	e0dd      	b.n	80027bc <HAL_RCC_OscConfig+0x1098>
 8002600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002604:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800260c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002612:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	fa93 f2a3 	rbit	r2, r3
 800261c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002620:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002624:	601a      	str	r2, [r3, #0]
  return result;
 8002626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800262a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800262e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800263a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	461a      	mov	r2, r3
 8002642:	2300      	movs	r3, #0
 8002644:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe f92f 	bl	80008a8 <HAL_GetTick>
 800264a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264e:	e009      	b.n	8002664 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7fe f92a 	bl	80008a8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d901      	bls.n	8002664 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0ac      	b.n	80027be <HAL_RCC_OscConfig+0x109a>
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800266c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002670:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002676:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002684:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002688:	601a      	str	r2, [r3, #0]
  return result;
 800268a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002692:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d102      	bne.n	80026ae <HAL_RCC_OscConfig+0xf8a>
 80026a8:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_OscConfig+0x10a4>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	e027      	b.n	80026fe <HAL_RCC_OscConfig+0xfda>
 80026ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	fa93 f2a3 	rbit	r2, r3
 80026ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026d2:	601a      	str	r2, [r3, #0]
 80026d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_RCC_OscConfig+0x10a4>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002702:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002706:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800270a:	6011      	str	r1, [r2, #0]
 800270c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002710:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	fa92 f1a2 	rbit	r1, r2
 800271a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800271e:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002722:	6011      	str	r1, [r2, #0]
  return result;
 8002724:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002728:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0220 	orr.w	r2, r2, #32
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d182      	bne.n	8002650 <HAL_RCC_OscConfig+0xf2c>
 800274a:	e037      	b.n	80027bc <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002750:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e02e      	b.n	80027be <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_OscConfig+0x10a4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_RCC_OscConfig+0x10a4>)
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002770:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002774:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800277c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	429a      	cmp	r2, r3
 8002786:	d117      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002788:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800278c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002794:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800279c:	429a      	cmp	r2, r3
 800279e:	d10b      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80027a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027a4:	f003 020f 	and.w	r2, r3, #15
 80027a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b09e      	sub	sp, #120	; 0x78
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e162      	b.n	8002aaa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b90      	ldr	r3, [pc, #576]	; (8002a28 <HAL_RCC_ClockConfig+0x25c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d910      	bls.n	8002814 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b8d      	ldr	r3, [pc, #564]	; (8002a28 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	498b      	ldr	r1, [pc, #556]	; (8002a28 <HAL_RCC_ClockConfig+0x25c>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b89      	ldr	r3, [pc, #548]	; (8002a28 <HAL_RCC_ClockConfig+0x25c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e14a      	b.n	8002aaa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002820:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	497f      	ldr	r1, [pc, #508]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 800282e:	4313      	orrs	r3, r2
 8002830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80dc 	beq.w	80029f8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d13c      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xf6>
 8002848:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800284c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002850:	fa93 f3a3 	rbit	r3, r3
 8002854:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b01      	cmp	r3, #1
 800286a:	d102      	bne.n	8002872 <HAL_RCC_ClockConfig+0xa6>
 800286c:	4b6f      	ldr	r3, [pc, #444]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	e00f      	b.n	8002892 <HAL_RCC_ClockConfig+0xc6>
 8002872:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002876:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	667b      	str	r3, [r7, #100]	; 0x64
 8002880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002884:	663b      	str	r3, [r7, #96]	; 0x60
 8002886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800288e:	4b67      	ldr	r3, [pc, #412]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002896:	65ba      	str	r2, [r7, #88]	; 0x58
 8002898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0220 	orr.w	r2, r2, #32
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d17b      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0f3      	b.n	8002aaa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d13c      	bne.n	8002944 <HAL_RCC_ClockConfig+0x178>
 80028ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	fab3 f383 	clz	r3, r3
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	095b      	lsrs	r3, r3, #5
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d102      	bne.n	80028f4 <HAL_RCC_ClockConfig+0x128>
 80028ee:	4b4f      	ldr	r3, [pc, #316]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	e00f      	b.n	8002914 <HAL_RCC_ClockConfig+0x148>
 80028f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	647b      	str	r3, [r7, #68]	; 0x44
 8002902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002906:	643b      	str	r3, [r7, #64]	; 0x40
 8002908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002910:	4b46      	ldr	r3, [pc, #280]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002918:	63ba      	str	r2, [r7, #56]	; 0x38
 800291a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800291c:	fa92 f2a2 	rbit	r2, r2
 8002920:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002922:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	f002 021f 	and.w	r2, r2, #31
 8002934:	2101      	movs	r1, #1
 8002936:	fa01 f202 	lsl.w	r2, r1, r2
 800293a:	4013      	ands	r3, r2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d13a      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b2      	b.n	8002aaa <HAL_RCC_ClockConfig+0x2de>
 8002944:	2302      	movs	r3, #2
 8002946:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	fab3 f383 	clz	r3, r3
 8002956:	b2db      	uxtb	r3, r3
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	b2db      	uxtb	r3, r3
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b01      	cmp	r3, #1
 8002964:	d102      	bne.n	800296c <HAL_RCC_ClockConfig+0x1a0>
 8002966:	4b31      	ldr	r3, [pc, #196]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e00d      	b.n	8002988 <HAL_RCC_ClockConfig+0x1bc>
 800296c:	2302      	movs	r3, #2
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	2302      	movs	r3, #2
 800297a:	623b      	str	r3, [r7, #32]
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	4b29      	ldr	r3, [pc, #164]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2202      	movs	r2, #2
 800298a:	61ba      	str	r2, [r7, #24]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	fa92 f2a2 	rbit	r2, r2
 8002992:	617a      	str	r2, [r7, #20]
  return result;
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	fab2 f282 	clz	r2, r2
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	f042 0220 	orr.w	r2, r2, #32
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	f002 021f 	and.w	r2, r2, #31
 80029a6:	2101      	movs	r1, #1
 80029a8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e079      	b.n	8002aaa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b6:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	491a      	ldr	r1, [pc, #104]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c8:	f7fd ff6e 	bl	80008a8 <HAL_GetTick>
 80029cc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	e00a      	b.n	80029e6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d0:	f7fd ff6a 	bl	80008a8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	f241 3288 	movw	r2, #5000	; 0x1388
 80029de:	4293      	cmp	r3, r2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e061      	b.n	8002aaa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_RCC_ClockConfig+0x260>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 020c 	and.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d1eb      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_RCC_ClockConfig+0x25c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d214      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 0207 	bic.w	r2, r3, #7
 8002a0e:	4906      	ldr	r1, [pc, #24]	; (8002a28 <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <HAL_RCC_ClockConfig+0x25c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e040      	b.n	8002aaa <HAL_RCC_ClockConfig+0x2de>
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	491a      	ldr	r1, [pc, #104]	; (8002ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4912      	ldr	r1, [pc, #72]	; (8002ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a6e:	f000 f829 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4601      	mov	r1, r0
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_RCC_ClockConfig+0x2e8>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7c:	22f0      	movs	r2, #240	; 0xf0
 8002a7e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	60fa      	str	r2, [r7, #12]
  return result;
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	40d3      	lsrs	r3, r2
 8002a92:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x2ec>)
 8002a94:	5cd3      	ldrb	r3, [r2, r3]
 8002a96:	fa21 f303 	lsr.w	r3, r1, r3
 8002a9a:	4a08      	ldr	r2, [pc, #32]	; (8002abc <HAL_RCC_ClockConfig+0x2f0>)
 8002a9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_RCC_ClockConfig+0x2f4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fd febc 	bl	8000820 <HAL_InitTick>
  
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3778      	adds	r7, #120	; 0x78
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	0800388c 	.word	0x0800388c
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b08b      	sub	sp, #44	; 0x2c
 8002ac8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002ade:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d002      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x30>
 8002aee:	2b08      	cmp	r3, #8
 8002af0:	d003      	beq.n	8002afa <HAL_RCC_GetSysClockFreq+0x36>
 8002af2:	e03f      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002af4:	4b25      	ldr	r3, [pc, #148]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002af6:	623b      	str	r3, [r7, #32]
      break;
 8002af8:	e03f      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b00:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b04:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	fa92 f2a2 	rbit	r2, r2
 8002b0c:	607a      	str	r2, [r7, #4]
  return result;
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	fab2 f282 	clz	r2, r2
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	40d3      	lsrs	r3, r2
 8002b18:	4a1d      	ldr	r2, [pc, #116]	; (8002b90 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b1a:	5cd3      	ldrb	r3, [r2, r3]
 8002b1c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	220f      	movs	r2, #15
 8002b28:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	fa92 f2a2 	rbit	r2, r2
 8002b30:	60fa      	str	r2, [r7, #12]
  return result;
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	fab2 f282 	clz	r2, r2
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	40d3      	lsrs	r3, r2
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
 8002b40:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b4c:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fb02 f303 	mul.w	r3, r2, r3
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	e007      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	fb02 f303 	mul.w	r3, r2, r3
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	623b      	str	r3, [r7, #32]
      break;
 8002b72:	e002      	b.n	8002b7a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b76:	623b      	str	r3, [r7, #32]
      break;
 8002b78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	372c      	adds	r7, #44	; 0x2c
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	007a1200 	.word	0x007a1200
 8002b90:	080038a4 	.word	0x080038a4
 8002b94:	080038b4 	.word	0x080038b4

08002b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <HAL_RCC_GetHCLKFreq+0x14>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000000 	.word	0x20000000

08002bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bb6:	f7ff ffef 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bba:	4601      	mov	r1, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bc4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	fa92 f2a2 	rbit	r2, r2
 8002bd0:	603a      	str	r2, [r7, #0]
  return result;
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	fab2 f282 	clz	r2, r2
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	40d3      	lsrs	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	0800389c 	.word	0x0800389c

08002bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bfa:	f7ff ffcd 	bl	8002b98 <HAL_RCC_GetHCLKFreq>
 8002bfe:	4601      	mov	r1, r0
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c0c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	603a      	str	r2, [r7, #0]
  return result;
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	40d3      	lsrs	r3, r2
 8002c20:	4a04      	ldr	r2, [pc, #16]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	0800389c 	.word	0x0800389c

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b092      	sub	sp, #72	; 0x48
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80d4 	beq.w	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5c:	4b4e      	ldr	r3, [pc, #312]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10e      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	4b4b      	ldr	r3, [pc, #300]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4a4a      	ldr	r2, [pc, #296]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	61d3      	str	r3, [r2, #28]
 8002c74:	4b48      	ldr	r3, [pc, #288]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a41      	ldr	r2, [pc, #260]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fd fe03 	bl	80008a8 <HAL_GetTick>
 8002ca2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fd fdff 	bl	80008a8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e1d6      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cc4:	4b34      	ldr	r3, [pc, #208]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8084 	beq.w	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d07c      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce4:	4b2c      	ldr	r3, [pc, #176]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b26      	ldr	r3, [pc, #152]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2301      	movs	r3, #1
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	fa93 f3a3 	rbit	r3, r3
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	461a      	mov	r2, r3
 8002d32:	2300      	movs	r3, #0
 8002d34:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d36:	4a18      	ldr	r2, [pc, #96]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d04b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d46:	f7fd fdaf 	bl	80008a8 <HAL_GetTick>
 8002d4a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4c:	e00a      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4e:	f7fd fdab 	bl	80008a8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e180      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	2302      	movs	r3, #2
 8002d72:	623b      	str	r3, [r7, #32]
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d108      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d92:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	e00d      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	10908100 	.word	0x10908100
 8002da4:	2302      	movs	r3, #2
 8002da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	4b9a      	ldr	r3, [pc, #616]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2202      	movs	r2, #2
 8002db6:	613a      	str	r2, [r7, #16]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	fa92 f2a2 	rbit	r2, r2
 8002dbe:	60fa      	str	r2, [r7, #12]
  return result;
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	fab2 f282 	clz	r2, r2
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f002 021f 	and.w	r2, r2, #31
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0b7      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002dde:	4b8f      	ldr	r3, [pc, #572]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	498c      	ldr	r1, [pc, #560]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df8:	4b88      	ldr	r3, [pc, #544]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a87      	ldr	r2, [pc, #540]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d008      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e10:	4b82      	ldr	r3, [pc, #520]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	f023 0203 	bic.w	r2, r3, #3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	497f      	ldr	r1, [pc, #508]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e2e:	4b7b      	ldr	r3, [pc, #492]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	4978      	ldr	r1, [pc, #480]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e4c:	4b73      	ldr	r3, [pc, #460]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4970      	ldr	r1, [pc, #448]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0320 	and.w	r3, r3, #32
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e6a:	4b6c      	ldr	r3, [pc, #432]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f023 0210 	bic.w	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	4969      	ldr	r1, [pc, #420]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e88:	4b64      	ldr	r3, [pc, #400]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	4961      	ldr	r1, [pc, #388]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ea6:	4b5d      	ldr	r3, [pc, #372]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f023 0220 	bic.w	r2, r3, #32
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	495a      	ldr	r1, [pc, #360]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ec4:	4b55      	ldr	r3, [pc, #340]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	4952      	ldr	r1, [pc, #328]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ee2:	4b4e      	ldr	r3, [pc, #312]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	494b      	ldr	r1, [pc, #300]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	4943      	ldr	r1, [pc, #268]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f1e:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	493c      	ldr	r1, [pc, #240]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f3c:	4b37      	ldr	r3, [pc, #220]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f48:	4934      	ldr	r1, [pc, #208]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f5a:	4b30      	ldr	r3, [pc, #192]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	492d      	ldr	r1, [pc, #180]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f78:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	4925      	ldr	r1, [pc, #148]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f96:	4b21      	ldr	r3, [pc, #132]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	491e      	ldr	r1, [pc, #120]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	4916      	ldr	r1, [pc, #88]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002fd2:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	490f      	ldr	r1, [pc, #60]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	4907      	ldr	r1, [pc, #28]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00c      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800300e:	4b03      	ldr	r3, [pc, #12]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	e002      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800301a:	bf00      	nop
 800301c:	40021000 	.word	0x40021000
 8003020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003022:	4913      	ldr	r1, [pc, #76]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003024:	4313      	orrs	r3, r2
 8003026:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003034:	4b0e      	ldr	r3, [pc, #56]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003040:	490b      	ldr	r1, [pc, #44]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003042:	4313      	orrs	r3, r2
 8003044:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003052:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305e:	4904      	ldr	r1, [pc, #16]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003060:	4313      	orrs	r3, r2
 8003062:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3748      	adds	r7, #72	; 0x48
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000

08003074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e040      	b.n	8003108 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fd faf2 	bl	8000680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0201 	bic.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f82c 	bl	8003110 <UART_SetConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e022      	b.n	8003108 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f9f6 	bl	80034bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fa7d 	bl	8003600 <UART_CheckIdleState>
 8003106:	4603      	mov	r3, r0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b92      	ldr	r3, [pc, #584]	; (8003384 <UART_SetConfig+0x274>)
 800313c:	4013      	ands	r3, r2
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	6979      	ldr	r1, [r7, #20]
 8003144:	430b      	orrs	r3, r1
 8003146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	430a      	orrs	r2, r1
 8003180:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a80      	ldr	r2, [pc, #512]	; (8003388 <UART_SetConfig+0x278>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d120      	bne.n	80031ce <UART_SetConfig+0xbe>
 800318c:	4b7f      	ldr	r3, [pc, #508]	; (800338c <UART_SetConfig+0x27c>)
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b03      	cmp	r3, #3
 8003196:	d817      	bhi.n	80031c8 <UART_SetConfig+0xb8>
 8003198:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <UART_SetConfig+0x90>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	080031b1 	.word	0x080031b1
 80031a4:	080031bd 	.word	0x080031bd
 80031a8:	080031c3 	.word	0x080031c3
 80031ac:	080031b7 	.word	0x080031b7
 80031b0:	2301      	movs	r3, #1
 80031b2:	77fb      	strb	r3, [r7, #31]
 80031b4:	e0b5      	b.n	8003322 <UART_SetConfig+0x212>
 80031b6:	2302      	movs	r3, #2
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e0b2      	b.n	8003322 <UART_SetConfig+0x212>
 80031bc:	2304      	movs	r3, #4
 80031be:	77fb      	strb	r3, [r7, #31]
 80031c0:	e0af      	b.n	8003322 <UART_SetConfig+0x212>
 80031c2:	2308      	movs	r3, #8
 80031c4:	77fb      	strb	r3, [r7, #31]
 80031c6:	e0ac      	b.n	8003322 <UART_SetConfig+0x212>
 80031c8:	2310      	movs	r3, #16
 80031ca:	77fb      	strb	r3, [r7, #31]
 80031cc:	e0a9      	b.n	8003322 <UART_SetConfig+0x212>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a6f      	ldr	r2, [pc, #444]	; (8003390 <UART_SetConfig+0x280>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d124      	bne.n	8003222 <UART_SetConfig+0x112>
 80031d8:	4b6c      	ldr	r3, [pc, #432]	; (800338c <UART_SetConfig+0x27c>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e4:	d011      	beq.n	800320a <UART_SetConfig+0xfa>
 80031e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031ea:	d817      	bhi.n	800321c <UART_SetConfig+0x10c>
 80031ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f0:	d011      	beq.n	8003216 <UART_SetConfig+0x106>
 80031f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031f6:	d811      	bhi.n	800321c <UART_SetConfig+0x10c>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <UART_SetConfig+0xf4>
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d006      	beq.n	8003210 <UART_SetConfig+0x100>
 8003202:	e00b      	b.n	800321c <UART_SetConfig+0x10c>
 8003204:	2300      	movs	r3, #0
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e08b      	b.n	8003322 <UART_SetConfig+0x212>
 800320a:	2302      	movs	r3, #2
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e088      	b.n	8003322 <UART_SetConfig+0x212>
 8003210:	2304      	movs	r3, #4
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	e085      	b.n	8003322 <UART_SetConfig+0x212>
 8003216:	2308      	movs	r3, #8
 8003218:	77fb      	strb	r3, [r7, #31]
 800321a:	e082      	b.n	8003322 <UART_SetConfig+0x212>
 800321c:	2310      	movs	r3, #16
 800321e:	77fb      	strb	r3, [r7, #31]
 8003220:	e07f      	b.n	8003322 <UART_SetConfig+0x212>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a5b      	ldr	r2, [pc, #364]	; (8003394 <UART_SetConfig+0x284>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d124      	bne.n	8003276 <UART_SetConfig+0x166>
 800322c:	4b57      	ldr	r3, [pc, #348]	; (800338c <UART_SetConfig+0x27c>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003234:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003238:	d011      	beq.n	800325e <UART_SetConfig+0x14e>
 800323a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800323e:	d817      	bhi.n	8003270 <UART_SetConfig+0x160>
 8003240:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003244:	d011      	beq.n	800326a <UART_SetConfig+0x15a>
 8003246:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800324a:	d811      	bhi.n	8003270 <UART_SetConfig+0x160>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <UART_SetConfig+0x148>
 8003250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003254:	d006      	beq.n	8003264 <UART_SetConfig+0x154>
 8003256:	e00b      	b.n	8003270 <UART_SetConfig+0x160>
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e061      	b.n	8003322 <UART_SetConfig+0x212>
 800325e:	2302      	movs	r3, #2
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e05e      	b.n	8003322 <UART_SetConfig+0x212>
 8003264:	2304      	movs	r3, #4
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e05b      	b.n	8003322 <UART_SetConfig+0x212>
 800326a:	2308      	movs	r3, #8
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e058      	b.n	8003322 <UART_SetConfig+0x212>
 8003270:	2310      	movs	r3, #16
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e055      	b.n	8003322 <UART_SetConfig+0x212>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a47      	ldr	r2, [pc, #284]	; (8003398 <UART_SetConfig+0x288>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d124      	bne.n	80032ca <UART_SetConfig+0x1ba>
 8003280:	4b42      	ldr	r3, [pc, #264]	; (800338c <UART_SetConfig+0x27c>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003288:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800328c:	d011      	beq.n	80032b2 <UART_SetConfig+0x1a2>
 800328e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003292:	d817      	bhi.n	80032c4 <UART_SetConfig+0x1b4>
 8003294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003298:	d011      	beq.n	80032be <UART_SetConfig+0x1ae>
 800329a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800329e:	d811      	bhi.n	80032c4 <UART_SetConfig+0x1b4>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <UART_SetConfig+0x19c>
 80032a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a8:	d006      	beq.n	80032b8 <UART_SetConfig+0x1a8>
 80032aa:	e00b      	b.n	80032c4 <UART_SetConfig+0x1b4>
 80032ac:	2300      	movs	r3, #0
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e037      	b.n	8003322 <UART_SetConfig+0x212>
 80032b2:	2302      	movs	r3, #2
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e034      	b.n	8003322 <UART_SetConfig+0x212>
 80032b8:	2304      	movs	r3, #4
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e031      	b.n	8003322 <UART_SetConfig+0x212>
 80032be:	2308      	movs	r3, #8
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e02e      	b.n	8003322 <UART_SetConfig+0x212>
 80032c4:	2310      	movs	r3, #16
 80032c6:	77fb      	strb	r3, [r7, #31]
 80032c8:	e02b      	b.n	8003322 <UART_SetConfig+0x212>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a33      	ldr	r2, [pc, #204]	; (800339c <UART_SetConfig+0x28c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d124      	bne.n	800331e <UART_SetConfig+0x20e>
 80032d4:	4b2d      	ldr	r3, [pc, #180]	; (800338c <UART_SetConfig+0x27c>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80032dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032e0:	d011      	beq.n	8003306 <UART_SetConfig+0x1f6>
 80032e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032e6:	d817      	bhi.n	8003318 <UART_SetConfig+0x208>
 80032e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032ec:	d011      	beq.n	8003312 <UART_SetConfig+0x202>
 80032ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f2:	d811      	bhi.n	8003318 <UART_SetConfig+0x208>
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <UART_SetConfig+0x1f0>
 80032f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fc:	d006      	beq.n	800330c <UART_SetConfig+0x1fc>
 80032fe:	e00b      	b.n	8003318 <UART_SetConfig+0x208>
 8003300:	2300      	movs	r3, #0
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e00d      	b.n	8003322 <UART_SetConfig+0x212>
 8003306:	2302      	movs	r3, #2
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e00a      	b.n	8003322 <UART_SetConfig+0x212>
 800330c:	2304      	movs	r3, #4
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	e007      	b.n	8003322 <UART_SetConfig+0x212>
 8003312:	2308      	movs	r3, #8
 8003314:	77fb      	strb	r3, [r7, #31]
 8003316:	e004      	b.n	8003322 <UART_SetConfig+0x212>
 8003318:	2310      	movs	r3, #16
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e001      	b.n	8003322 <UART_SetConfig+0x212>
 800331e:	2310      	movs	r3, #16
 8003320:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332a:	d16c      	bne.n	8003406 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 800332c:	7ffb      	ldrb	r3, [r7, #31]
 800332e:	2b08      	cmp	r3, #8
 8003330:	d838      	bhi.n	80033a4 <UART_SetConfig+0x294>
 8003332:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <UART_SetConfig+0x228>)
 8003334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003338:	0800335d 	.word	0x0800335d
 800333c:	08003365 	.word	0x08003365
 8003340:	0800336d 	.word	0x0800336d
 8003344:	080033a5 	.word	0x080033a5
 8003348:	08003373 	.word	0x08003373
 800334c:	080033a5 	.word	0x080033a5
 8003350:	080033a5 	.word	0x080033a5
 8003354:	080033a5 	.word	0x080033a5
 8003358:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7ff fc28 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 8003360:	61b8      	str	r0, [r7, #24]
        break;
 8003362:	e024      	b.n	80033ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003364:	f7ff fc46 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8003368:	61b8      	str	r0, [r7, #24]
        break;
 800336a:	e020      	b.n	80033ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <UART_SetConfig+0x290>)
 800336e:	61bb      	str	r3, [r7, #24]
        break;
 8003370:	e01d      	b.n	80033ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7ff fba7 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8003376:	61b8      	str	r0, [r7, #24]
        break;
 8003378:	e019      	b.n	80033ae <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	61bb      	str	r3, [r7, #24]
        break;
 8003380:	e015      	b.n	80033ae <UART_SetConfig+0x29e>
 8003382:	bf00      	nop
 8003384:	efff69f3 	.word	0xefff69f3
 8003388:	40013800 	.word	0x40013800
 800338c:	40021000 	.word	0x40021000
 8003390:	40004400 	.word	0x40004400
 8003394:	40004800 	.word	0x40004800
 8003398:	40004c00 	.word	0x40004c00
 800339c:	40005000 	.word	0x40005000
 80033a0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	77bb      	strb	r3, [r7, #30]
        break;
 80033ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d075      	beq.n	80034a0 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	005a      	lsls	r2, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	085b      	lsrs	r3, r3, #1
 80033be:	441a      	add	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	2b0f      	cmp	r3, #15
 80033d0:	d916      	bls.n	8003400 <UART_SetConfig+0x2f0>
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d212      	bcs.n	8003400 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	f023 030f 	bic.w	r3, r3, #15
 80033e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	085b      	lsrs	r3, r3, #1
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	89fa      	ldrh	r2, [r7, #14]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	e04f      	b.n	80034a0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	77bb      	strb	r3, [r7, #30]
 8003404:	e04c      	b.n	80034a0 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003406:	7ffb      	ldrb	r3, [r7, #31]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d828      	bhi.n	800345e <UART_SetConfig+0x34e>
 800340c:	a201      	add	r2, pc, #4	; (adr r2, 8003414 <UART_SetConfig+0x304>)
 800340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003412:	bf00      	nop
 8003414:	08003439 	.word	0x08003439
 8003418:	08003441 	.word	0x08003441
 800341c:	08003449 	.word	0x08003449
 8003420:	0800345f 	.word	0x0800345f
 8003424:	0800344f 	.word	0x0800344f
 8003428:	0800345f 	.word	0x0800345f
 800342c:	0800345f 	.word	0x0800345f
 8003430:	0800345f 	.word	0x0800345f
 8003434:	08003457 	.word	0x08003457
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003438:	f7ff fbba 	bl	8002bb0 <HAL_RCC_GetPCLK1Freq>
 800343c:	61b8      	str	r0, [r7, #24]
        break;
 800343e:	e013      	b.n	8003468 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003440:	f7ff fbd8 	bl	8002bf4 <HAL_RCC_GetPCLK2Freq>
 8003444:	61b8      	str	r0, [r7, #24]
        break;
 8003446:	e00f      	b.n	8003468 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <UART_SetConfig+0x3a8>)
 800344a:	61bb      	str	r3, [r7, #24]
        break;
 800344c:	e00c      	b.n	8003468 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800344e:	f7ff fb39 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8003452:	61b8      	str	r0, [r7, #24]
        break;
 8003454:	e008      	b.n	8003468 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003456:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800345a:	61bb      	str	r3, [r7, #24]
        break;
 800345c:	e004      	b.n	8003468 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	77bb      	strb	r3, [r7, #30]
        break;
 8003466:	bf00      	nop
    }

    if (pclk != 0U)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d018      	beq.n	80034a0 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	085a      	lsrs	r2, r3, #1
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	441a      	add	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003480:	b29b      	uxth	r3, r3
 8003482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	2b0f      	cmp	r3, #15
 8003488:	d908      	bls.n	800349c <UART_SetConfig+0x38c>
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d204      	bcs.n	800349c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	e001      	b.n	80034a0 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3720      	adds	r7, #32
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	007a1200 	.word	0x007a1200

080034bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ba:	d10a      	bne.n	80035d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af02      	add	r7, sp, #8
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003610:	f7fd f94a 	bl	80008a8 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d10e      	bne.n	8003642 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003624:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f82d 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e023      	b.n	800368a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d10e      	bne.n	800366e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003650:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f817 	bl	8003692 <UART_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e00d      	b.n	800368a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b09c      	sub	sp, #112	; 0x70
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	603b      	str	r3, [r7, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a2:	e0a5      	b.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036aa:	f000 80a1 	beq.w	80037f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7fd f8fb 	bl	80008a8 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80036be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d13e      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036cc:	e853 3f00 	ldrex	r3, [r3]
 80036d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036d8:	667b      	str	r3, [r7, #100]	; 0x64
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	461a      	mov	r2, r3
 80036e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80036e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80036ea:	e841 2300 	strex	r3, r2, [r1]
 80036ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80036f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1e6      	bne.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3308      	adds	r3, #8
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	663b      	str	r3, [r7, #96]	; 0x60
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3308      	adds	r3, #8
 8003714:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003716:	64ba      	str	r2, [r7, #72]	; 0x48
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800371c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e067      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d04f      	beq.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800375a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375e:	d147      	bne.n	80037f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003768:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	e853 3f00 	ldrex	r3, [r3]
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800377e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003788:	637b      	str	r3, [r7, #52]	; 0x34
 800378a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800378c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800378e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003790:	e841 2300 	strex	r3, r2, [r1]
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1e6      	bne.n	800376a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3308      	adds	r3, #8
 80037a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	613b      	str	r3, [r7, #16]
   return(result);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f023 0301 	bic.w	r3, r3, #1
 80037b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3308      	adds	r3, #8
 80037ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037bc:	623a      	str	r2, [r7, #32]
 80037be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	69f9      	ldr	r1, [r7, #28]
 80037c2:	6a3a      	ldr	r2, [r7, #32]
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e5      	bne.n	800379c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e010      	b.n	8003812 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69da      	ldr	r2, [r3, #28]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	429a      	cmp	r2, r3
 800380c:	f43f af4a 	beq.w	80036a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3770      	adds	r7, #112	; 0x70
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <__libc_init_array>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4d0d      	ldr	r5, [pc, #52]	; (8003854 <__libc_init_array+0x38>)
 8003820:	4c0d      	ldr	r4, [pc, #52]	; (8003858 <__libc_init_array+0x3c>)
 8003822:	1b64      	subs	r4, r4, r5
 8003824:	10a4      	asrs	r4, r4, #2
 8003826:	2600      	movs	r6, #0
 8003828:	42a6      	cmp	r6, r4
 800382a:	d109      	bne.n	8003840 <__libc_init_array+0x24>
 800382c:	4d0b      	ldr	r5, [pc, #44]	; (800385c <__libc_init_array+0x40>)
 800382e:	4c0c      	ldr	r4, [pc, #48]	; (8003860 <__libc_init_array+0x44>)
 8003830:	f000 f820 	bl	8003874 <_init>
 8003834:	1b64      	subs	r4, r4, r5
 8003836:	10a4      	asrs	r4, r4, #2
 8003838:	2600      	movs	r6, #0
 800383a:	42a6      	cmp	r6, r4
 800383c:	d105      	bne.n	800384a <__libc_init_array+0x2e>
 800383e:	bd70      	pop	{r4, r5, r6, pc}
 8003840:	f855 3b04 	ldr.w	r3, [r5], #4
 8003844:	4798      	blx	r3
 8003846:	3601      	adds	r6, #1
 8003848:	e7ee      	b.n	8003828 <__libc_init_array+0xc>
 800384a:	f855 3b04 	ldr.w	r3, [r5], #4
 800384e:	4798      	blx	r3
 8003850:	3601      	adds	r6, #1
 8003852:	e7f2      	b.n	800383a <__libc_init_array+0x1e>
 8003854:	080038c4 	.word	0x080038c4
 8003858:	080038c4 	.word	0x080038c4
 800385c:	080038c4 	.word	0x080038c4
 8003860:	080038c8 	.word	0x080038c8

08003864 <memset>:
 8003864:	4402      	add	r2, r0
 8003866:	4603      	mov	r3, r0
 8003868:	4293      	cmp	r3, r2
 800386a:	d100      	bne.n	800386e <memset+0xa>
 800386c:	4770      	bx	lr
 800386e:	f803 1b01 	strb.w	r1, [r3], #1
 8003872:	e7f9      	b.n	8003868 <memset+0x4>

08003874 <_init>:
 8003874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003876:	bf00      	nop
 8003878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800387a:	bc08      	pop	{r3}
 800387c:	469e      	mov	lr, r3
 800387e:	4770      	bx	lr

08003880 <_fini>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr
